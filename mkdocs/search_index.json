{
    "docs": [
        {
            "location": "/", 
            "text": "TTN - Architecture Specifications\n\n\nForeword\n\n\nThis document hereby refers to the content of the whole website. Any contributors is welcomed\nand could give a hand in several manners:\n\n\n\n\nLooking for and correcting typos\n\n\nAdd relevant and non redundant information\n\n\nComplete a part marked as //TODO\n\n\n\n\nRegardless of what you'll attempt, make sure to check \nthe issues list on\nGitHub\n before doing anything\n. Thus, if nobody is already working on something\nrelated, open an issue with a clear and concise title and briefly explain your incoming changes\nin the description. Then, fork the project, do your work, and create a Pull Request on the\noriginal repository. \n\n\nTo sum up:\n\n\n\n\nCheck \nGitHub issues\n\n\nOpen a new issue if no one exist\n\n\nFork the repository\n\n\nCreate a Pull Request once you're done\n\n\n\n\nThanks a lot !\n\n\nOverview\n\n\nThe following document describe the specifications for The Things Network's Architecture\nversion 1. These specifications focus on the network architecture which includes 4 kind of\ncomponents:\n\n\n\n\nRouters \n\n\nBrokers\n\n\nNetwork Servers\n\n\nHandlers\n\n\n\n\nIncidentally, those components are interacting with other external entities on which we have -\nif any - only few control :\n\n\n\n\nNodes (also known as end-devices)\n\n\nGateways\n\n\nApplications\n\n\n\n\n\n\n\n\nNetwork components\n\n\n\n\nNode\n\n\nNodes or end-devices refer to one end of the chain. Devices emit signals using\n\nLoRa\n modulation and frequency range towards Gateways. They are split into\n3 classes: \n\n\n\n\nA\n: Cannot receive any data from the network unless they've initiated the communication\n\n\nB\n: Can receive data from the network at precisely scheduled windows (Beacons)\n\n\nC\n: Can receive data at any time from the network\n\n\n\n\nIncidentally, class A requires less power than B which requires less power than C. \nAn end-device has an address either assigned by the Network or self-defined. An end-device\nalso has a specific secret application session key and a network session key \n\n\nThese specifications primarly focus on the class A. Future network versions will implement\nmechanisms to handle class B and class C but they are irrevelant with the current document.\n\n\nGateway\n\n\nGateways might be seen as a way to transform multiple messages emitters into one much more\ndemanding emitter. Therefore, a Gateway gathers \nLoRa\n signals coming from a\nbunch of near end-devices. A given device does not need to know the nearest gateways, nor it\nhas to communicate with a specific one - signals are simply broadcasted into the wild open. \n\n\nGateways receive signals which reach them, and forward the message to a dedicated Router. The\nData could be either a sensor result or a specific network command such as a connection\nrequest. A Gateway actually send incoming packets to a router, one-by-one, and after having\nwrapped each of them into a \njson\n structure holding meta-data about the Gateway itself (such as\nGateway's address, a timestamp and GPS coordinates if available).\n\n\nGateways can also emit packets coming from the network toward a Node using the \nLoRa\ntechnology\n. In fact, Gateways are in charge of taking care of emission at a\nscheduled time defined by the network meaning that the network is able to send packets to\nGateways at any moment, regardless of their emission time (see more about the two-windows\nresponse mechanism //TODO add a link). \n\n\nApplication\n\n\nRouter\n\n\nRouters are entry points of the network from Nodes perspective. A Router receives packets\ngathered by some Gateways and initially transmitted by Nodes. Then, it forwards those packets\nto one or several Brokers. The communication is seemingly bi-directional: Routers may also\ntransfer packets from Broker to Gateways. \n\n\n\n\n\n\nUplink forwarding\n\n\n\n\nBroker\n\n\nBrokers have a global vision of a network's part. They are in charge of several nodes, meaning\nthat they will handle packets coming from those nodes (thereby, they are able to tell to\nRouters if they can handle a given packet). Several Routers may send packets coming from the\nsame end-device (shared by several segments / Gateways), all duplicates are managed by the\nBroker and are sent to a corresponding Handler.\n\n\nA Broker is thereby able to check the integrity of a packet and is closely communicating with a\nNetwork Server in order to administrate the related device. As an order of magnitude, Brokers\nare designed to be in charge of a whole country or region (if the region has enough activity to\ndeserve a dedicated Broker).\n\n\nNetwork Server\n\n\nNetwork servers are processing \nMAC\n commands emitted by end-devices as well as taking care\nof the data rates and the frequency of the devices. Network Servers would emit commands to\noptimize the network by adjusting end-devices data rates / frequencies unless the node is\nrequesting to keep its configuration as is. \n\n\nFor the moment, a single Network Server will be associated for each Broker. No communication\nmechanisms between Network Servers is planned for the first version. Also, it won't be possible\nfor a Broker to query another Network Server than the one it has been assigned to. Those\nfeatures might be part of a second version. \n\n\nHandler\n\n\nHandlers materialize the entry point to the network for client Applications. They are secure\nreferees which encode and decode data coming from application before transmitting them to a\nBroker of the network. Therefore, they are in charge of handling applications secret keys and\nonly communicate an application id to Brokers (as well as a specific network session key,\ndescribed in further sections). This way, the whole chain is able to forward a packet to the\ncorresponding Handler without having any information about either the recipient (but a\nmeaningless id) or the content. \n\n\nBecause a given Handler is able to decrypt the data payload of a given packet, it could\nalso implement mechanisms such as Geolocation and send to the corresponding application some\ninteresting meta-data.\n\n\nAn Handler could be either part of an application or a standalone trusty server on which\napplication may register. The Things Network will provide Handlers as part of the whole network\nbut - and this is true for any component - anyone could create its own implementation as long\nas it is compliant to the following specifications.", 
            "title": "Home"
        }, 
        {
            "location": "/#ttn-architecture-specifications", 
            "text": "", 
            "title": "TTN - Architecture Specifications"
        }, 
        {
            "location": "/#foreword", 
            "text": "This document hereby refers to the content of the whole website. Any contributors is welcomed\nand could give a hand in several manners:   Looking for and correcting typos  Add relevant and non redundant information  Complete a part marked as //TODO   Regardless of what you'll attempt, make sure to check  the issues list on\nGitHub  before doing anything . Thus, if nobody is already working on something\nrelated, open an issue with a clear and concise title and briefly explain your incoming changes\nin the description. Then, fork the project, do your work, and create a Pull Request on the\noriginal repository.   To sum up:   Check  GitHub issues  Open a new issue if no one exist  Fork the repository  Create a Pull Request once you're done   Thanks a lot !", 
            "title": "Foreword"
        }, 
        {
            "location": "/#overview", 
            "text": "The following document describe the specifications for The Things Network's Architecture\nversion 1. These specifications focus on the network architecture which includes 4 kind of\ncomponents:   Routers   Brokers  Network Servers  Handlers   Incidentally, those components are interacting with other external entities on which we have -\nif any - only few control :   Nodes (also known as end-devices)  Gateways  Applications     Network components", 
            "title": "Overview"
        }, 
        {
            "location": "/#node", 
            "text": "Nodes or end-devices refer to one end of the chain. Devices emit signals using LoRa  modulation and frequency range towards Gateways. They are split into\n3 classes:    A : Cannot receive any data from the network unless they've initiated the communication  B : Can receive data from the network at precisely scheduled windows (Beacons)  C : Can receive data at any time from the network   Incidentally, class A requires less power than B which requires less power than C. \nAn end-device has an address either assigned by the Network or self-defined. An end-device\nalso has a specific secret application session key and a network session key   These specifications primarly focus on the class A. Future network versions will implement\nmechanisms to handle class B and class C but they are irrevelant with the current document.", 
            "title": "Node"
        }, 
        {
            "location": "/#gateway", 
            "text": "Gateways might be seen as a way to transform multiple messages emitters into one much more\ndemanding emitter. Therefore, a Gateway gathers  LoRa  signals coming from a\nbunch of near end-devices. A given device does not need to know the nearest gateways, nor it\nhas to communicate with a specific one - signals are simply broadcasted into the wild open.   Gateways receive signals which reach them, and forward the message to a dedicated Router. The\nData could be either a sensor result or a specific network command such as a connection\nrequest. A Gateway actually send incoming packets to a router, one-by-one, and after having\nwrapped each of them into a  json  structure holding meta-data about the Gateway itself (such as\nGateway's address, a timestamp and GPS coordinates if available).  Gateways can also emit packets coming from the network toward a Node using the  LoRa\ntechnology . In fact, Gateways are in charge of taking care of emission at a\nscheduled time defined by the network meaning that the network is able to send packets to\nGateways at any moment, regardless of their emission time (see more about the two-windows\nresponse mechanism //TODO add a link).", 
            "title": "Gateway"
        }, 
        {
            "location": "/#application", 
            "text": "", 
            "title": "Application"
        }, 
        {
            "location": "/#router", 
            "text": "Routers are entry points of the network from Nodes perspective. A Router receives packets\ngathered by some Gateways and initially transmitted by Nodes. Then, it forwards those packets\nto one or several Brokers. The communication is seemingly bi-directional: Routers may also\ntransfer packets from Broker to Gateways.     Uplink forwarding", 
            "title": "Router"
        }, 
        {
            "location": "/#broker", 
            "text": "Brokers have a global vision of a network's part. They are in charge of several nodes, meaning\nthat they will handle packets coming from those nodes (thereby, they are able to tell to\nRouters if they can handle a given packet). Several Routers may send packets coming from the\nsame end-device (shared by several segments / Gateways), all duplicates are managed by the\nBroker and are sent to a corresponding Handler.  A Broker is thereby able to check the integrity of a packet and is closely communicating with a\nNetwork Server in order to administrate the related device. As an order of magnitude, Brokers\nare designed to be in charge of a whole country or region (if the region has enough activity to\ndeserve a dedicated Broker).", 
            "title": "Broker"
        }, 
        {
            "location": "/#network-server", 
            "text": "Network servers are processing  MAC  commands emitted by end-devices as well as taking care\nof the data rates and the frequency of the devices. Network Servers would emit commands to\noptimize the network by adjusting end-devices data rates / frequencies unless the node is\nrequesting to keep its configuration as is.   For the moment, a single Network Server will be associated for each Broker. No communication\nmechanisms between Network Servers is planned for the first version. Also, it won't be possible\nfor a Broker to query another Network Server than the one it has been assigned to. Those\nfeatures might be part of a second version.", 
            "title": "Network Server"
        }, 
        {
            "location": "/#handler", 
            "text": "Handlers materialize the entry point to the network for client Applications. They are secure\nreferees which encode and decode data coming from application before transmitting them to a\nBroker of the network. Therefore, they are in charge of handling applications secret keys and\nonly communicate an application id to Brokers (as well as a specific network session key,\ndescribed in further sections). This way, the whole chain is able to forward a packet to the\ncorresponding Handler without having any information about either the recipient (but a\nmeaningless id) or the content.   Because a given Handler is able to decrypt the data payload of a given packet, it could\nalso implement mechanisms such as Geolocation and send to the corresponding application some\ninteresting meta-data.  An Handler could be either part of an application or a standalone trusty server on which\napplication may register. The Things Network will provide Handlers as part of the whole network\nbut - and this is true for any component - anyone could create its own implementation as long\nas it is compliant to the following specifications.", 
            "title": "Handler"
        }
    ]
}